#!/usr/bin/perl
#
# tcstat - Prints tc class usage
#
# Version: 0.2.0

use strict;
use Getopt::Std;

our($opt_h, $opt_i, $opt_g, $opt_w, $opt_f);
my $device;
my $cf = glob($ENV{"HOME"} . "/.tcstat.rc");   # default configfile path
my %names = ();
my %classes = ();
my %last = ();
my $interval = 5;                              # default interval
my ($name, $bytes, $packets, $dropped, $olimits, $idle, $backlog);
my ($borrowed, $overactions);

# -h         no header
# -i <dev>   device
# -g         "gnuplot mode"
# -w <sec>   time to wait between printing (-g mode)
# -f <file>  config file (containing class names)
getopts('hi:gw:f:');

if ($opt_i) { $device = $opt_i; } else {
    print "Usage: cbqstat -i <device> [options]\n";
    exit;
}

if ($opt_w =~ /\d+/) { $interval = $opt_w; }   # handle -w <seconds>
if ($opt_f) { $cf = $opt_f; }                  # handle -f <file>

# header is not printed out when in gnuplot mode or when -h is given
if (!$opt_h and !$opt_g) {
print "Name              Bytes     Packets  Dropped  Olimits  AvgIdle ";
print "Backlog\n";
print "-" x 70, "\n";
}

# output format for stat mode (non-gnuplot mode)
format STDOUT =
@<<<<<<< @>>>>>>>>>>>>> @>>>>>>>>>> @>>>>>>> @>>>>>>> @>>>>>>> @>>>>>>
$name,   $bytes,        $packets,   $dropped,$olimits,$idle,   $backlog
.

# read configfile
#
# format:
# <classid> <name>
# <classid> <name>
# ...
# EOF
#
if (open CF, "< $cf") {
    while ( <CF> ) {
        chomp;
        if ($_ !~ /^#/) {
            if (/(.*?)\s(.*)/) {
                $names{$1} = $2;
            }
        }
    }
    close CF;
}

my $cnt = 0;

# mainloop, looping until user aborts
while (1) {
    $cnt++;
    display_classes();
    last if (!$opt_g);      # only print once when not in gnuplot mode
    sleep 1;
}

# prints out the statics for all classes
sub display_classes
{
    my $d = `tc -s class ls dev $device`;

    # Split the output into classes and extract the information
    #
    # class cbq 1:1221 parent 1:122 leaf 80aa: rate 60Kbit (bounded) prio 2
    #  Sent 2424326 bytes 1607 pkts (dropped 0, overlimits 9610) 
    #  borrowed 0 overactions 1552 avgidle -153350 undertime 188704
    # class ...
    # 
    while ( $d =~ s/class\s(.+?)\s(.+?)\s.*?         # class type and name
                    Sent\s(\d+?)\sbytes\s(\d+?)\s.*? # nr of bytes and packets
                    dropped\s(\d+?),.*?              # dropped packets
                    overlimits\s(\d+?)\)             # overlimits
                    (.*?)                            # catch stuff like backlog
                    borrowed\s(\d+?)\s               # borrowed
                    overactions\s(\d+?)\s            # overactions
                    avgidle\s(.+?)\s                 # average idle
                    (.*)$/$11/smix ) {               # keep the rest

        # check if a name was specified for this classid
        if ($names{$2} ne undef) {
            $name = $names{$2};
        } else {
            $name = $2;
        }

        $bytes = $3;
        $packets = $4;
        $dropped = $5;
        $olimits = $6;
        $borrowed = $8;
        $overactions = $9;
        $idle = $10;

        # check if backlog is given
        if ($7 =~ /backlog\s(.*?)\s/) {
            $backlog = $1;
        } else {
            $backlog = 0;
        }

        # create a new anonymous hash if we see this class for the
        # first time
        if ($classes{$name} eq undef) {
            $classes{$name} = {};
        }

        # the previous results of each class needs to be stored to be able
        # to calculate the delta (gnuplot mode)
        #
        # if we see the class for the first time we need to create a new
        # entry and save the current results.
        if ($last{$name} eq undef) {
            $last{$name} = {
                bytes => $bytes,
                packets => $packets,
                dropped => $dropped,
                olimits => $olimits,
                borrowed => $borrowed,
                overactions => $overactions,
                idle => $idle,
                backlog => $backlog
            };
        }

        # get references to class totals hash and previous results hash
        my $h = $classes{$name};
        my $o = $last{$name};

        if ($opt_g) {

            # gnuplot mode
            #
            # delta = (current results - previous results)
            # add the delta to the class totals
            #
            $h->{"bytes"} += ($bytes - $o->{"bytes"});
            $h->{"packets"} += ($packets - $o->{"packets"});
            $h->{"dropped"} += ($dropped - $o->{"dropped"});
            $h->{"olimits"} += ($olimits - $o->{"olimits"});
            $h->{"borrowed"} += ($borrowed - $o->{"borrowed"});
            $h->{"overactions"} += ($overactions - $o->{"overactions"});
            $h->{"idle"} += ($idle - $o->{"idle"});
            $h->{"backlog"} += ($backlog - $o->{"backlog"});

            # overwrite the previous results with the current results
            $o->{"bytes"} = $bytes;
            $o->{"packets"} = $packets;
            $o->{"dropped"} = $dropped;
            $o->{"olimits"} = $olimits;
            $o->{"borrowed"} = $borrowed;
            $o->{"overactions"} = $overactions;
            $o->{"idle"} = $idle;
            $o->{"backlog"} = $backlog;

            # check if interval is reached
            if (($cnt % $interval) eq 0) {

                # average rate = (class totals / interval)
                # round to next integer
                #
                $bytes = sprintf("%d", ($h->{"bytes"} / $interval));
                $packets = sprintf("%d", ($h->{"packets"} / $interval));
                $dropped = sprintf("%d", ($h->{"dropped"} / $interval));
                $olimits = sprintf("%d", ($h->{"olimits"} / $interval));
                $borrowed = sprintf("%d", ($h->{"borrowed"} / $interval));
                $overactions = sprintf("%d", ($h->{"overactions"}/$interval));
                $idle = sprintf("%d", ($h->{"idle"} / $interval));
                $backlog = sprintf("%d", ($h->{"backlog"} / $interval));

                # reset class totals
                $h->{"bytes"} = 0;
                $h->{"packets"} = 0;
                $h->{"dropped"} = 0;
                $h->{"olimits"} = 0;
                $h->{"borrowed"} = 0;
                $h->{"overactions"} = 0;
                $h->{"idle"} = 0;
                $h->{"backlog"} = 0;

                # print out all values tab-delimited
                print "$cnt\t$name\t$bytes\t$packets\t$dropped\t$olimits\t";
                print "$borrowed\t$overactions\t$idle\t$backlog\n";
            }
        } else {

            # Stat mode (non-gnuplot mode)
            # Just print the values in the format defined at the top
            write
        }
    }
}

